<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Python Pioneer: The Forest Function</title>
    <!-- Load Tailwind CSS for modern, responsive styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for a clean, educational interface */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap');
        body { font-family: 'Inter', sans-serif; background-color: #f7f9fb; }
        .game-grid {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            grid-template-rows: repeat(10, 1fr);
            aspect-ratio: 1 / 1; /* Keep it square */
            background-color: #2c5237; /* Forest Green */
            border: 4px solid #1a202c;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
        }
        .grid-cell {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid rgba(0, 0, 0, 0.1);
            font-size: 20px;
        }
        .player { background-color: #f6ad55; border: 2px solid #dd6b20; border-radius: 50%; width: 80%; height: 80%; transition: all 0.3s ease; box-shadow: 0 0 10px #f6ad55; }
        .finish { background-color: #68d391; }
        .obstacle { background-color: #9f7aea; color: white; }
        .key { color: #f6e05e; }
        .locked-door { background-color: #a0aec0; color: #4a5568; }
        .unlocked-door { background-color: #68d391; }
        .console-output {
            background-color: #1a202c;
            color: #48bb78;
            font-family: monospace;
            padding: 0.5rem;
            min-height: 100px;
            max-height: 200px;
            overflow-y: auto;
            border-radius: 0.5rem;
        }
        textarea { font-family: monospace; resize: none; }
    </style>
</head>
<body class="p-4 md:p-8">

    <div id="game-container" class="max-w-4xl mx-auto">
        <h1 class="text-4xl font-extrabold text-gray-800 mb-6 text-center">
            üå≥ Python Pioneer: The Function Forest
        </h1>

        <!-- Game Layout: Instructions, Map, and Code Editor -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            
            <!-- Left Panel: Instructions and Map -->
            <div class="space-y-6">
                <div id="mission-log" class="bg-white p-6 rounded-xl shadow-lg border-t-4 border-indigo-500">
                    <h2 class="text-2xl font-bold mb-3 text-indigo-700">Mission: The First Steps (Level 1/3)</h2>
                    <p class="text-gray-700 font-medium" id="instruction-text">
                        Welcome, Pioneer! Your first task is simple: prove you can use the **print()** function to display the secret word: **PYTHON**. Type `print("PYTHON")` in the code editor and click RUN!
                    </p>
                    <p class="mt-4 text-sm text-gray-500">
                        Pioneer's location: (<span id="player-x">0</span>, <span id="player-y">9</span>)
                    </p>
                </div>

                <div id="game-map" class="game-grid rounded-xl">
                    <!-- Grid cells will be generated by JavaScript -->
                </div>
            </div>

            <!-- Right Panel: Code Editor and Console -->
            <div class="space-y-6">
                <!-- Code Editor -->
                <div class="bg-white p-6 rounded-xl shadow-lg border-t-4 border-green-500">
                    <h2 class="text-2xl font-bold mb-3 text-green-700">Code Editor (<span class="text-sm font-normal text-gray-500">Python</span>)</h2>
                    <textarea id="python-code" rows="10" class="w-full p-3 border-2 border-gray-300 rounded-lg text-sm bg-gray-50 focus:border-green-500"># Start your Python code here!

print("Hello, Pioneer!")
</textarea>
                    <button onclick="runit()" class="w-full mt-4 py-3 text-lg font-bold text-white bg-green-600 hover:bg-green-700 rounded-lg shadow-md transition duration-150 transform hover:scale-[1.01]">
                        ‚ñ∂ RUN CODE
                    </button>
                    <div id="message-box" class="mt-4 hidden p-3 rounded-lg text-center font-semibold transition duration-300"></div>
                </div>

                <!-- Console Output -->
                <div class="bg-gray-800 p-6 rounded-xl shadow-lg">
                    <h2 class="text-2xl font-bold mb-3 text-gray-300">Console Output</h2>
                    <pre id="output" class="console-output"></pre>
                </div>
            </div>
        </div>

        <!-- Hidden Success Modal -->
        <div id="success-modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 hidden items-center justify-center p-4 z-50">
            <div class="bg-white p-8 rounded-xl max-w-md w-full text-center shadow-2xl">
                <div class="text-6xl mb-4">üèÜ</div>
                <h3 class="text-3xl font-bold text-green-600 mb-4">Mission Complete!</h3>
                <p class="text-gray-700 mb-6" id="modal-message"></p>
                <button onclick="Game.nextLevel()" class="px-6 py-3 bg-indigo-500 text-white font-semibold rounded-lg hover:bg-indigo-600 transition duration-150">
                    Continue to Next Level
                </button>
            </div>
        </div>
    </div>

    <!-- Skulpt Library CDN -->
    <script src="https://cdn.jsdelivr.net/npm/skulpt@1.2.0/dist/skulpt.min.js" type="text/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/skulpt@1.2.0/dist/skulpt-stdlib.js" type="text/javascript"></script>

    <script type="text/javascript">
        // Global references
        const outputElement = document.getElementById("output");
        const codeElement = document.getElementById("python-code");
        const missionLog = document.getElementById("mission-log");
        const instructionText = document.getElementById("instruction-text");
        const mapElement = document.getElementById("game-map");
        const messageBox = document.getElementById("message-box");
        const successModal = document.getElementById('success-modal');
        const modalMessage = document.getElementById('modal-message');
        const playerXDisplay = document.getElementById('player-x');
        const playerYDisplay = document.getElementById('player-y');

        // --- Skulpt Setup Functions ---

        /** Redirects Python's print() calls to the Console Output box. */
        function outf(text) {
            outputElement.innerHTML = outputElement.innerHTML + text;
            outputElement.scrollTop = outputElement.scrollHeight; // Auto-scroll
        }

        /** Required for Skulpt to handle standard Python modules like 'random' or 'math' */
        function builtinRead(x) {
            if (Sk.builtinFiles === undefined || Sk.builtinFiles["files"][x] === undefined)
                throw new Error("File not found: '" + x + "'");
            return Sk.builtinFiles["files"][x];
        }

        // --- Game Logic ---
        const Game = {
            GRID_SIZE: 10,
            player: { x: 0, y: 9, hasKey: false },
            level: 1,
            maxLevel: 3,
            // Map structure: 0=Empty, 1=Obstacle, 2=Finish/Door, 3=Key, 4=Player Start
            MAPS: [
                // Level 0 (Unused, simple example)
                [],
                // Level 1: Intro to print() - Path is blocked until command is executed
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [4, 0, 0, 0, 0, 0, 0, 0, 0, 2] // Player at (0,9), Finish at (9,9)
                ],
                // Level 2: Intro to Functions - Define and call 'move_pioneer()'
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [4, 0, 1, 0, 0, 0, 0, 0, 0, 2] // Start (0,9), Finish (9,9). Needs 3 RIGHT, 3 UP, 7 RIGHT.
                ],
                // Level 3: Intro to Variables and Loops (for) - Collect key and use loop for movement
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
                    [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 3, 0, 0, 0, 0, 1, 0, 0], // Key at (2,2)
                    [0, 1, 0, 1, 1, 1, 0, 1, 0, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                    [4, 1, 0, 1, 0, 1, 0, 1, 1, 1]  // Start (0,9), Finish (9,0)
                ]
            ],
            
            // Current map in use
            currentMap: [],

            init: function() {
                Game.loadLevel(Game.level);
                // Define the custom Python module 'game_env' that user can import
                Game.definePythonModule();
            },

            definePythonModule: function() {
                // Skulpt must be configured to allow calling JavaScript functions from Python
                Sk.builtins.game_env = {};

                // Python: game_env.move_pioneer(direction, steps=1)
                Sk.builtins.game_env.move_pioneer = new Sk.builtin.func(function(direction_js, steps_js) {
                    const direction = Sk.ffi.remapToJs(direction_js).toUpperCase();
                    const steps = steps_js ? Sk.ffi.remapToJs(steps_js) : 1;

                    if (typeof steps !== 'number' || steps <= 0) {
                         // Throw a Python-level error
                        throw new Sk.builtin.TypeError("The 'steps' argument must be a positive integer.");
                    }
                    
                    // Execute the move action in the JS game engine
                    for (let i = 0; i < steps; i++) {
                        Game.performMove(direction);
                    }
                    
                    // Return a successful Skulpt object
                    return Sk.builtin.none.none$; 
                });
            },

            performMove: function(direction) {
                let dx = 0, dy = 0;
                switch (direction) {
                    case 'UP': dy = -1; break;
                    case 'DOWN': dy = 1; break;
                    case 'LEFT': dx = -1; break;
                    case 'RIGHT': dx = 1; break;
                    default: 
                        console.error("Invalid direction:", direction);
                        return; // Stop execution if direction is invalid
                }

                const newX = Game.player.x + dx;
                const newY = Game.player.y + dy;

                if (newX < 0 || newX >= Game.GRID_SIZE || newY < 0 || newY >= Game.GRID_SIZE) {
                    Game.displayMessage("Ouch! You hit the boundary. Try a different direction.", 'error');
                    throw new Error("Boundary hit."); // Stop Python execution gracefully
                }

                const targetCell = Game.currentMap[newY][newX];
                
                if (targetCell === 1) {
                    Game.displayMessage("CRASH! You hit a Rock Obstacle. Change your path.", 'error');
                    throw new Error("Obstacle hit."); // Stop Python execution gracefully
                }

                // Update position
                Game.player.x = newX;
                Game.player.y = newY;
                Game.renderMap();
                
                // Check for goals
                Game.checkGoal(newX, newY, targetCell);
            },

            checkGoal: function(x, y, cellType) {
                if (Game.level === 1) {
                    // Level 1 success check is handled by the Python print() call.
                } else if (Game.level === 2 || Game.level === 3) {
                    if (cellType === 3) { // Key
                        Game.player.hasKey = true;
                        Game.currentMap[y][x] = 0; // Remove key from map
                        Game.displayMessage("Key collected! The path to the finish is now open.", 'success');
                        Game.renderMap();
                    } else if (cellType === 2) { // Finish/Door
                        if (Game.level === 3 && !Game.player.hasKey) {
                            Game.displayMessage("The finish door is locked! Find the Key first.", 'error');
                            // Revert position if locked
                            Game.player.x = x - (x === 0 ? 0 : 1);
                            Game.player.y = y - (y === 0 ? 0 : 1);
                            Game.renderMap();
                            throw new Error("Door is locked.");
                        } else {
                            Game.showModal(`You successfully reached the finish! You mastered Python ${Game.level === 2 ? 'Functions' : 'Loops'}!`);
                        }
                    }
                }
            },

            loadLevel: function(level) {
                Game.level = level;
                Game.currentMap = JSON.parse(JSON.stringify(Game.MAPS[level])); // Deep copy
                Game.player = { x: 0, y: 9, hasKey: false }; // Reset player state
                outputElement.innerHTML = ''; // Clear console

                // Set up player start position from map (find 4)
                let startFound = false;
                for (let y = 0; y < Game.GRID_SIZE; y++) {
                    for (let x = 0; x < Game.GRID_SIZE; x++) {
                        if (Game.currentMap[y][x] === 4) {
                            Game.player.x = x;
                            Game.player.y = y;
                            Game.currentMap[y][x] = 0; // Clear start position on map
                            startFound = true;
                            break;
                        }
                    }
                    if (startFound) break;
                }
                
                Game.updateUIForLevel();
                Game.renderMap();
            },
            
            updateUIForLevel: function() {
                let instructions = "";
                let starterCode = "";
                const title = `Mission: The ${Game.level === 1 ? 'First Steps' : Game.level === 2 ? 'Function Path' : 'Loop Labyrinth'} (Level ${Game.level}/${Game.maxLevel})`;
                
                switch(Game.level) {
                    case 1:
                        instructions = `Welcome, Pioneer! Your first task is simple: prove you can use the **print()** function to display the secret word: **PYTHON**. Type \`print("PYTHON")\` in the code editor and click RUN!`;
                        starterCode = `print("Hello, Pioneer!")`;
                        break;
                    case 2:
                        instructions = `Great job! Now let's learn **Functions**! Your Pioneer is blocked by a rock. To move, you must **import** the game commands and use the **move_pioneer()** function. The map shows the path to the finish.
                        
                        **GOAL:** Get to the Finish (Green Square) by writing Python code that calls \`game_env.move_pioneer("DIRECTION")\`. Directions are "UP" or "RIGHT".`;
                        starterCode = `# Use a function call to move!
# Import the game commands first:
import game_env

# Try moving right 2 steps:
# game_env.move_pioneer("RIGHT", 2)
`;
                        break;
                    case 3:
                        instructions = `Excellent! Now for **Loops** and **Variables**. You need the **Key** (Yellow Star) to unlock the Finish Door (Gray/Green Square). The path requires a lot of repetitive movement.
                        
                        **GOAL:** Collect the key and reach the finish. Use a **for loop** and a **variable** for efficient movement, like: \`for i in range(5):\`. Remember the door is locked until you get the key!`;
                        starterCode = `# Use a loop to move multiple times!
import game_env

# for i in range(10):
#     game_env.move_pioneer("UP")
`;
                        break;
                    default:
                        instructions = "Congratulations! You completed the game and are now a Python Pioneer!";
                        starterCode = "# Game Complete!";
                        document.querySelector('button[onclick="Game.nextLevel()"]').style.display = 'none';
                        break;
                }

                document.querySelector('#mission-log h2').textContent = title;
                instructionText.innerHTML = instructions;
                codeElement.value = starterCode;
            },

            renderMap: function() {
                mapElement.innerHTML = '';
                mapElement.style.pointerEvents = (Game.level === 1) ? 'none' : 'auto'; // Disable interaction on print() level
                
                // Set door color for Level 3
                const doorElement = document.querySelector('.locked-door') || document.querySelector('.unlocked-door');
                if (doorElement) {
                    doorElement.className = Game.player.hasKey ? 'grid-cell unlocked-door' : 'grid-cell locked-door';
                }

                for (let y = 0; y < Game.GRID_SIZE; y++) {
                    for (let x = 0; x < Game.GRID_SIZE; x++) {
                        const cell = document.createElement('div');
                        cell.className = 'grid-cell';

                        if (Game.player.x === x && Game.player.y === y) {
                            // Player
                            const pioneer = document.createElement('div');
                            pioneer.className = 'player';
                            cell.appendChild(pioneer);
                        } else if (Game.currentMap[y][x] === 1) {
                            cell.className += ' obstacle';
                            cell.innerHTML = 'üß±';
                        } else if (Game.currentMap[y][x] === 2) {
                            cell.className += Game.player.hasKey ? ' unlocked-door' : ' locked-door';
                            cell.innerHTML = Game.player.hasKey ? 'üîì' : 'üîí';
                        } else if (Game.currentMap[y][x] === 3) {
                            cell.className += ' key';
                            cell.innerHTML = 'üîë';
                        } else {
                            cell.className += ' bg-opacity-10';
                        }

                        mapElement.appendChild(cell);
                    }
                }
                playerXDisplay.textContent = Game.player.x;
                playerYDisplay.textContent = Game.player.y;
            },

            displayMessage: function(msg, type) {
                messageBox.textContent = msg;
                messageBox.className = `mt-4 p-3 rounded-lg text-center font-semibold transition duration-300`;
                messageBox.classList.remove('hidden');

                if (type === 'success') {
                    messageBox.classList.add('bg-green-100', 'text-green-800');
                } else if (type === 'error') {
                    messageBox.classList.add('bg-red-100', 'text-red-800');
                } else {
                    messageBox.classList.add('bg-blue-100', 'text-blue-800');
                }

                setTimeout(() => messageBox.classList.add('hidden'), 5000);
            },

            showModal: function(msg) {
                modalMessage.textContent = msg;
                successModal.classList.remove('hidden', 'opacity-0');
                successModal.classList.add('flex', 'opacity-100');
            },

            hideModal: function() {
                successModal.classList.remove('flex', 'opacity-100');
                successModal.classList.add('hidden', 'opacity-0');
            },
            
            nextLevel: function() {
                Game.hideModal();
                Game.level++;
                if (Game.level <= Game.maxLevel) {
                    Game.loadLevel(Game.level);
                } else {
                    // Final Game End
                    Game.level = 4;
                    Game.updateUIForLevel();
                    Game.displayMessage("You've mastered the basics of Python functions and control flow! Game Over!", 'success');
                }
            }
        };


        // --- Code Runner ---

        async function runit() {
            outputElement.innerHTML = ''; // Clear console output
            Game.displayMessage("Running Python code...", 'default');
            const prog = codeElement.value;

            Sk.configure({
                output: outf,
                read: builtinRead,
                // Custom function to check user's print output for Level 1
                __future__: Sk.python3, // Use Python 3 syntax
                __current_url: window.location.href // Helps Skulpt resolve imports
            });

            try {
                // Sk.misceval.asyncToPromise makes the Skulpt execution awaitable
                await Sk.misceval.asyncToPromise(function() {
                    return Sk.importMainWithBody("<stdin>", false, prog, true);
                });
                
                // Post-run checks
                if (Game.level === 1) {
                    // Check if the exact target word was printed
                    const output = outputElement.textContent.trim();
                    if (output.includes("PYTHON")) {
                        Game.showModal("Success! You mastered the `print()` function. Click continue to learn about functions and movement!");
                    } else {
                        Game.displayMessage("Not quite! Make sure you print the exact word 'PYTHON' (in all caps and quotes).", 'error');
                    }
                } else if (Game.level >= 2 && Game.player.x !== 0 && Game.player.y !== 9) {
                     // If the player moved but didn't hit the finish line, just show success
                     Game.displayMessage("Code executed successfully. The Pioneer moved!", 'success');
                } else if (Game.level >= 2 && Game.player.x === 0 && Game.player.y === 9) {
                    Game.displayMessage("Code ran, but the Pioneer didn't move! Did you call the `game_env.move_pioneer` function correctly?", 'error');
                }
                
            } catch (e) {
                // Display Python/Skulpt error gracefully
                Game.displayMessage(`Python Error: ${e.toString()}`, 'error');
            }
        }

        // Initialize the game when the window loads
        window.onload = Game.init;
    </script>
</body>
</html>
